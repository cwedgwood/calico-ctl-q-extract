{{- if and (ne .Values.network "ecs") (ne .Values.network "aks") }}
# as well as the CNI plugins and network config on
{{- end }}
# on each master and worker node in a Kubernetes cluster.
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: {{include "nodeName" . }}
  namespace: kube-system
  labels:
    k8s-app: {{include "nodeName" . }}
spec:
  selector:
    matchLabels:
      k8s-app: {{include "nodeName" . }}
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        k8s-app: {{include "nodeName" . }}
      annotations:
{{- if .Values.node.prometheusMetricsPort }}
        prometheus.io/scrape: 'true'
        prometheus.io/port: {{ .Values.node.prometheusMetricsPort | quote }}
{{- end }}
        # This, along with the CriticalAddonsOnly toleration below,
        # marks the pod as a critical add-on, ensuring it gets
        # priority scheduling and that its resources are reserved
        # if it ever gets evicted.
        scheduler.alpha.kubernetes.io/critical-pod: ''
        # This contains a hash of the {{include "variant_name" . | lower}}-config ConfigMap
        # and can be updated to trigger a rolling update if the ConfigMap is updated.
        calico-configmap-hash: {{ tuple "calico-config.yaml" . | include "calico.hash" }}
{{- if .Values.bgp }}
        custom-bgp-configmap-hash: {{ tuple "custom-bgp-config.yaml" . | include "calico.hash" }}
{{- end }}
{{- if .Values.typha.enabled }}
        felix-typha-cert-hash: {{ tuple "calico-typha-certs.yaml" . | include "calico.hash" }}
{{- end }}
{{- tuple .Values.node "calico-node" | include "calico.sec_app_profile" | indent 8 }}
{{- tuple .Values.cni "install-cni" | include "calico.sec_app_profile" | indent 8 }}
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      hostNetwork: true
      tolerations:
        # Make sure {{include "nodeName" . }} gets scheduled on all nodes.
        - effect: NoSchedule
          operator: Exists
        # Mark the pod as a critical add-on for rescheduling.
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoExecute
          operator: Exists
      serviceAccountName: {{include "nodeName" . }}
      # Minimize downtime during a rolling upgrade or deletion; tell Kubernetes to do a "force
      # deletion": https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods.
      terminationGracePeriodSeconds: 0
      priorityClassName: system-node-critical
{{- if .Values.imagePullSecrets }}
      imagePullSecrets:
{{- range $key, $value := .Values.imagePullSecrets }}
        - name: {{ $key }}
{{- end }}
{{- end }}
      initContainers:
{{- if and (ne .Values.network "ecs") (ne .Values.network "gke") (ne .Values.network "aks")  }}
        # This container installs the CNI binaries
        # and CNI network config file on each node.
        - name: install-cni
          image: {{ join ":" (list .Values.cni.image .Values.cni.tag) }}
          command: ["/install-cni.sh"]
          env:
            # Name of the CNI config file to create.
            - name: CNI_CONF_NAME
              value: "10-{{include "variant_name" . | lower}}.conflist"
            # The CNI network config to install on each node.
            - name: CNI_NETWORK_CONFIG
              valueFrom:
                configMapKeyRef:
                  name: {{include "variant_name" . | lower}}-config
                  key: cni_network_config
{{- if eq .Values.datastore "etcd" }}
            # The location of the etcd cluster.
            - name: ETCD_ENDPOINTS
              valueFrom:
                configMapKeyRef:
                  name: {{include "variant_name" . | lower}}-config
                  key: etcd_endpoints
{{- else if eq .Values.datastore "kubernetes" }}
            # Set the hostname based on the k8s node name.
            - name: KUBERNETES_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
{{- end }}
{{- if or (eq .Values.network "calico") (eq .Values.network "flannel") }}
            # CNI MTU Config variable
            - name: CNI_MTU
              valueFrom:
                configMapKeyRef:
                  name: {{include "variant_name" . | lower}}-config
                  key: veth_mtu
{{- end }}
            # Prevents the container from sleeping forever.
            - name: SLEEP
              value: "false"
{{- if .Values.cni.env }}
{{ toYaml .Values.cni.env | indent 12 }}
{{- end }}
          volumeMounts:
            - mountPath: /host/opt/cni/bin
              name: cni-bin-dir
            - mountPath: /host/etc/cni/net.d
              name: cni-net-dir
{{- if eq .Values.datastore "etcd" }}
            - mountPath: /calico-secrets
              name: etcd-certs
{{- end }}
{{- end }}
        # Adds a Flex Volume Driver that creates a per-pod Unix Domain Socket to allow Dikastes
        # to communicate with Felix over the Policy Sync API.
        - name: flexvol-driver
          image: {{ join ":" (list .Values.flexvol.image .Values.flexvol.tag) }}
          volumeMounts:
          - name: flexvol-driver-host
            mountPath: /host/driver
      containers:
        # Runs cnx-node container on each Kubernetes node.  This
        # container programs network policy and routes on each
        # host.
        - name: calico-node
          image: {{ join ":" (list .Values.node.image .Values.node.tag) }}
{{ tuple .Values.node.resources | include "calico.resourceLimits" | indent 10 -}}
          env:
{{- if eq .Values.datastore "etcd" }}
            # The location of the etcd cluster.
            - name: ETCD_ENDPOINTS
              valueFrom:
                configMapKeyRef:
                  name: {{include "variant_name" . | lower}}-config
                  key: etcd_endpoints
            # Location of the CA certificate for etcd.
            - name: ETCD_CA_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: {{include "variant_name" . | lower}}-config
                  key: etcd_ca
            # Location of the client key for etcd.
            - name: ETCD_KEY_FILE
              valueFrom:
                configMapKeyRef:
                  name: {{include "variant_name" . | lower}}-config
                  key: etcd_key
            # Location of the client certificate for etcd.
            - name: ETCD_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: {{include "variant_name" . | lower}}-config
                  key: etcd_cert
            # Set noderef for node controller.
            - name: CALICO_K8S_NODE_REF
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
{{- else if eq .Values.datastore "kubernetes" }}
            # Use Kubernetes API as the backing datastore.
            - name: DATASTORE_TYPE
              value: "kubernetes"
  {{- if eq .Values.ipam "host-local" }}
            # Configure route aggregation based on pod CIDR.
            - name: USE_POD_CIDR
              value: "true"
  {{- end }}
  {{- if .Values.typha.enabled }}
            # Typha support: controlled by the ConfigMap.
            - name: FELIX_TYPHAK8SSERVICENAME
              valueFrom:
                configMapKeyRef:
                  name: {{include "variant_name" . | lower}}-config
                  key: typha_service_name
  {{- end }}
            # Wait for the datastore.
            - name: WAIT_FOR_DATASTORE
              value: "true"
            # Set based on the k8s node name.
            - name: NODENAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
{{- end }}
{{- if eq .Values.network "calico" }}
            # Choose the backend to use.
            - name: CALICO_NETWORKING_BACKEND
              valueFrom:
                configMapKeyRef:
                  name: {{include "variant_name" . | lower}}-config
                  key: calico_backend
            # Cluster type to identify the deployment type
            - name: CLUSTER_TYPE
              value: "k8s,bgp"
            # Auto-detect the BGP IP address.
            - name: IP
              value: "autodetect"
            - name: CALICO_IPV4POOL_IPIP
              value: "{{ .Values.initialPool.ipIpMode }}"
            # Set MTU for tunnel device used if ipip is enabled
            - name: FELIX_IPINIPMTU
              valueFrom:
                configMapKeyRef:
                  name: {{include "variant_name" . | lower}}-config
                  key: veth_mtu
{{- else if eq .Values.network "ecs" }}
            # Don't enable BGP.
            - name: CALICO_NETWORKING_BACKEND
              value: "none"
            - name: FELIX_INTERFACEPREFIX
              value: "eni"
            # This will make Felix honor AWS VPC CNI's mangle table
            # rules.
            - name: FELIX_IPTABLESMANGLEALLOWACTION
              value: Return
            # Cluster type to identify the deployment type
            - name: CLUSTER_TYPE
              value: "k8s,ecs"
            - name: NO_DEFAULT_POOLS
              value: "true"
{{- else if eq .Values.network "aks" }}
            # Don't enable BGP.
            - name: CALICO_NETWORKING_BACKEND
              value: "none"
            - name: FELIX_INTERFACEPREFIX
              value: "azv"
            # Cluster type to identify the deployment type
            - name: CLUSTER_TYPE
              value: "k8s,aks"
            - name: NO_DEFAULT_POOLS
              value: "true"
{{- else if eq .Values.network "gke" }}
            # Don't enable BGP.  We're relying on native GKE CNI.
            - name: CALICO_NETWORKING_BACKEND
              value: "none"
            - name: FELIX_INTERFACEPREFIX
              value: "gke"
            # GKE CNI has its own iptables rules, defer to those after ours have run.
            - name: FELIX_IPTABLESMANGLEALLOWACTION
              value: "Return"
            - name: FELIX_IPTABLESFILTERALLOWACTION
              value: "Return"
            # Cluster type to identify the deployment type
            - name: CLUSTER_TYPE
              value: "k8s,gke"
            - name: NO_DEFAULT_POOLS
              value: "true"
{{- else }}
            # Don't enable BGP.
            - name: CALICO_NETWORKING_BACKEND
              value: "none"
            # Cluster type to identify the deployment type
            - name: CLUSTER_TYPE
              value: "k8s"
{{- end }}
{{- if and (ne .Values.network "ecs") (ne .Values.network "gke") (ne .Values.network "aks") }}
            # The default IPv4 pool to create on startup if none exists. Pod IPs will be
            # chosen from this range. Changing this value after installation will have
            # no effect. This should fall within `--cluster-cidr`.
            - name: CALICO_IPV4POOL_CIDR
              value: "{{ .Values.initialPool.cidr }}"
{{- end }}
            # Disable file logging so `kubectl logs` works.
            - name: CALICO_DISABLE_FILE_LOGGING
              value: "true"
            # Set Felix endpoint to host default action to ACCEPT.
            - name: FELIX_DEFAULTENDPOINTTOHOSTACTION
              value: "ACCEPT"
            # Disable IPv6 on Kubernetes.
            - name: FELIX_IPV6SUPPORT
              value: "false"
            # Set Felix logging to "info"
            - name: FELIX_LOGSEVERITYSCREEN
              value: {{ .Values.node.logLevel }}
            - name: FELIX_HEALTHENABLED
              value: "true"
            # Additional Felix configuration options
{{- if .Values.node.prometheusMetricsPort }}
            # Enable Tigera Secure EE Prometheus denied packet reporting
            - name: FELIX_PROMETHEUSREPORTERENABLED
              value: "true"
            # Make Tigera Secure EE Prometheus metrics available on port 9081
            - name: FELIX_PROMETHEUSREPORTERPORT
              value: {{ .Values.node.prometheusMetricsPort | quote }}
{{- else }}
            # Enable Tigera Secure EE Prometheus denied packet reporting
            - name: FELIX_PROMETHEUSREPORTERENABLED
              value: "false"
{{- end }}
            # Enable Tigera Secure EE Flow Log generation
            - name: FELIX_FLOWLOGSFILEENABLED
              value: "true"
            # Include endpoint labels in Tigera Secure EE Flow Log
            - name: FELIX_FLOWLOGSFILEINCLUDELABELS
              value: "true"
            # Include policies in Tigera Secure EE Flow Log
            - name: FELIX_FLOWLOGSFILEINCLUDEPOLICIES
              value: "true"
            # Enable processing network sets in EE Flow Logs
            - name: FELIX_FLOWLOGSENABLENETWORKSETS
              value: "true"
            # Enable Tigera Secure EE DNS Log generation, with a limit of 1000 logs per node per 5 minutes
            - name: FELIX_DNSLOGSFILEENABLED
              value: "true"
            - name: FELIX_DNSLOGSFILEPERNODELIMIT
              value: "1000"
{{- if .Values.typha.enabled }}
            # Location of the CA bundle Felix uses to authenticate Typha; volume mount
            - name: FELIX_TYPHACAFILE
              value: /calico-typha-ca/caBundle
            # Common name on the Typha certificate; used to verify we are talking to an authentic typha
            - name: FELIX_TYPHACN
              value: {{.Values.typha.tls.typhaCommonName}}
            # Location of the client certificate for connecting to Typha; volume mount
            - name: FELIX_TYPHACERTFILE
              value: /calico-felix-certs/felix.crt
            # Location of the client certificate key for connecting to Typha; volume mount
            - name: FELIX_TYPHAKEYFILE
              value: /calico-felix-certs/felix.key
{{- end }}
            # Sets Default Security Groups if tigera-aws-config exists
            - name: TIGERA_DEFAULT_SECURITY_GROUPS
              valueFrom:
                configMapKeyRef:
                  name: tigera-aws-config
                  key: default_sgs
                  optional: true
            # Sets Pod Security Group if tigera-aws-config exists
            - name: TIGERA_POD_SECURITY_GROUP
              valueFrom:
                configMapKeyRef:
                  name: tigera-aws-config
                  key: pod_sg
                  optional: true
{{- if .Values.node.env }}
{{ toYaml .Values.node.env | indent 12 }}
{{- end }}
          securityContext:
            privileged: true
          livenessProbe:
            exec:
              command:
              - /bin/calico-node
              - -felix-live
{{- if and (eq .Values.network "calico") (not .Values.flannel_migration) }}
              - -bird-live
{{- end }}
            periodSeconds: 10
            initialDelaySeconds: 10
            failureThreshold: 6
          readinessProbe:
{{- if eq .Values.network "calico" }}
            exec:
              command:
              - /bin/calico-node
              - -bird-ready
              - -felix-ready
{{- else }}
            exec:
              command:
              - /bin/calico-node
              - -felix-ready
{{- end }}
            periodSeconds: 10
          volumeMounts:
            - mountPath: /lib/modules
              name: lib-modules
              readOnly: true
            - mountPath: /run/xtables.lock
              name: xtables-lock
              readOnly: false
            - mountPath: /var/run/calico
              name: var-run-calico
              readOnly: false
            - mountPath: /var/lib/calico
              name: var-lib-calico
              readOnly: false
            - mountPath: /var/log/calico
              name: var-log-calico
              readOnly: false
{{- if .Values.typha.enabled }}
            - mountPath: "/calico-typha-ca"
              name: calico-typha-ca
              readOnly: true
            - mountPath: /calico-felix-certs
              name: calico-felix-certs
              readOnly: true
{{- end }}
{{- if eq .Values.datastore "etcd" }}
            - mountPath: /calico-secrets
              name: etcd-certs
{{- end }}
{{- if .Values.bgp }}
  {{- range $key, $value := .Values.bgp }}
            - name: bird-templates
              mountPath: /etc/calico/confd/templates/{{ $key }}
              subPath: {{ $key }}
  {{- end }}
{{- end }}
            - name: policysync
              mountPath: /var/run/nodeagent
      volumes:
        # Used by cnx-node.
        - name: lib-modules
          hostPath:
            path: /lib/modules
        - name: var-run-calico
          hostPath:
            path: /var/run/calico
        - name: var-lib-calico
          hostPath:
            path: /var/lib/calico
        - name: xtables-lock
          hostPath:
            path: /run/xtables.lock
            type: FileOrCreate
{{- if and (ne .Values.network "ecs") (ne .Values.network "aks") }}
        # Used to install CNI.
        - name: cni-bin-dir
          hostPath:
{{- if eq .Values.platform "gke" }}
            path: /home/kubernetes/bin
{{- else }}
            path: /opt/cni/bin
{{- end }}
        - name: cni-net-dir
          hostPath:
            path: /etc/cni/net.d
{{- end }}
{{- if eq .Values.datastore "etcd" }}
        # Mount in the etcd TLS secrets with mode 400.
        # See https://kubernetes.io/docs/concepts/configuration/secret/
        - name: etcd-certs
          secret:
            secretName: calico-etcd-secrets
            defaultMode: 0400
{{- else if and (eq .Values.network "calico") (eq .Values.datastore "kubernetes") }}
        # Mount in the directory for host-local IPAM allocations. This is
        # used when upgrading from host-local to calico-ipam, and can be removed
        # if not using the upgrade-ipam init container.
        - name: host-local-net-dir
          hostPath:
            path: /var/lib/cni/networks
{{- end }}
        # Used to create per-pod Unix Domain Sockets
        - name: policysync
          hostPath:
            type: DirectoryOrCreate
            path: /var/run/nodeagent
        # Used to install Flex Volume Driver
        - name: flexvol-driver-host
          hostPath:
            type: DirectoryOrCreate
{{- if eq .Values.platform "gke" }}
            path: /home/kubernetes/flexvolume/nodeagent~uds
{{- else if eq .Values.platform "aks" }}
            path: /etc/kubernetes/volumeplugins/nodeagent~uds
{{- else }}
            path: /usr/libexec/kubernetes/kubelet-plugins/volume/exec/nodeagent~uds
{{- end }}
{{- if .Values.bgp }}
        - name: bird-templates
          configMap:
            name: bgp-templates
{{- end }}
        # Used for calico logs
        - name: var-log-calico
          hostPath:
            type: DirectoryOrCreate
            path: /var/log/calico
{{- if .Values.typha.enabled }}
        - name: calico-typha-ca
          configMap:
            name: calico-typha-ca
        - name: calico-felix-certs
          secret:
            secretName: calico-felix-certs
{{- end }}

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{include "nodeName" . }}
  namespace: kube-system
